import java.io.*;
import java.net.*;
import java.util.StringTokenizer;

public class LargestNumberServer {
    public static void main(String[] args) throws Exception {
        // Create server socket on port 6789
        ServerSocket welcomeSocket = new ServerSocket(6789);
        System.out.println("Server is running... Waiting for client");

        while (true) {
            Socket connectionSocket = welcomeSocket.accept();
            System.out.println("Client connected!");

            // Input and output streams
            DataInputStream inFromClient = new DataInputStream(connectionSocket.getInputStream());
            DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream());

            // Receive numbers as a single string
            String numbers = inFromClient.readUTF();
            System.out.println("Received from client: " + numbers);

            // Use StringTokenizer to split numbers
            StringTokenizer st = new StringTokenizer(numbers, " ");
            int largest = Integer.MIN_VALUE;

            while (st.hasMoreTokens()) {
                int num = Integer.parseInt(st.nextToken());
                if (num > largest) {
                    largest = num;
                }
            }

            // Send largest number back
            outToClient.writeUTF("Largest number is: " + largest);

            connectionSocket.close();
        }
    }
}
import java.io.*;
import java.net.*;
import java.util.Scanner;

public class LargestNumberClient {
    public static void main(String[] args) throws Exception {
        // Connect to server
        Socket clientSocket = new Socket("127.0.0.1", 6789);

        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
        DataInputStream inFromServer = new DataInputStream(clientSocket.getInputStream());

        // Take numbers from user
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter numbers separated by space: ");
        String numbers = sc.nextLine();

        // Send numbers to server
        outToServer.writeUTF(numbers);

        // Receive largest number
        String response = inFromServer.readUTF();
        System.out.println("FROM SERVER: " + response);

        clientSocket.close();
        sc.close();
    }
}
import java.io.*;
import java.net.*;

public class IPClassServer {
    public static void main(String[] args) throws Exception {
        ServerSocket welcomeSocket = new ServerSocket(6789);
        System.out.println("Server waiting for client...");

        while (true) {
            Socket connectionSocket = welcomeSocket.accept();
            DataInputStream inFromClient = new DataInputStream(connectionSocket.getInputStream());
            DataOutputStream outToClient = new DataOutputStream(connectionSocket.getOutputStream());

            String request = inFromClient.readUTF();
            System.out.println("Client requested: " + request);

            if (request.equalsIgnoreCase("IPCLASS")) {
                InetAddress serverIP = InetAddress.getLocalHost();
                String ip = serverIP.getHostAddress();
                String ipClass = getIPClass(ip);

                outToClient.writeUTF("Server IP: " + ip + " belongs to Class " + ipClass);
            } else {
                outToClient.writeUTF("Invalid request. Please type 'IPCLASS'.");
            }

            connectionSocket.close();
        }
    }

    public static String getIPClass(String ip) {
        int firstOctet = Integer.parseInt(ip.split("\\.")[0]);
        if (firstOctet >= 1 && firstOctet <= 126) return "A";
        else if (firstOctet >= 128 && firstOctet <= 191) return "B";
        else if (firstOctet >= 192 && firstOctet <= 223) return "C";
        else if (firstOctet >= 224 && firstOctet <= 239) return "D";
        else if (firstOctet >= 240 && firstOctet <= 255) return "E";
        else return "Unknown";
    }
}
import java.io.*;
import java.net.*;
import java.util.Scanner;

public class IPClassClient {
    public static void main(String[] args) throws Exception {
        Socket clientSocket = new Socket("127.0.0.1", 6789);

        DataOutputStream outToServer = new DataOutputStream(clientSocket.getOutputStream());
        DataInputStream inFromServer = new DataInputStream(clientSocket.getInputStream());

        Scanner sc = new Scanner(System.in);
        System.out.println("Type 'IPCLASS' to get server IP class: ");
        String request = sc.nextLine();

        // Send request to server
        outToServer.writeUTF(request);

        // Receive server response
        String response = inFromServer.readUTF();
        System.out.println("FROM SERVER: " + response);

        clientSocket.close();
        sc.close();
    }
}
